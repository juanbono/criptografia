{-# LANGUAGE OverloadedStrings #-}

module Main where

import Criptografia
import CLI
import qualified Data.ByteString as BS
import Options.Applicative (execParser)
import Data.ByteString.Lens (packedBytes)
import Control.Lens (from, (^.))

main :: IO ()
main = do
  -- parse arguments
  cmd <- execParser opts
  -- extract the secret key and init vector
  let (key, initv) = (fromString . secretKey $ cmd, fromString . iv $ cmd)
  -- read the image
  (img, header) <- readImage (filename cmd)

  let imageStream = toWord64List (img^.from packedBytes)

  -- stream of numbers (Word64) generated by MUGI
  let randomStream = mugiStream $ initMugi key initv

  let xoredList = toWord8List $ zipWith (<+>) imageStream randomStream
  let newImg = BS.pack xoredList

  -- write the image using the same header
  writeImage "./lena-mugi.bmp" (newImg, header)
